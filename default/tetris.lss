
tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000cc4  00000d58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  00800140  00800140  00000d98  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000078  00000000  00000000  000014e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020d  00000000  00000000  00001561  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000aed  00000000  00000000  0000176e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000576  00000000  00000000  0000225b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009b0  00000000  00000000  000027d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000170  00000000  00000000  00003184  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e8  00000000  00000000  000032f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000306  00000000  00000000  000035dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000173  00000000  00000000  000038e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000028  00000000  00000000  00003a55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__vector_1>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 11 04 	jmp	0x822	; 0x822 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__vector_21>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ec       	ldi	r30, 0xC4	; 196
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 34       	cpi	r26, 0x40	; 64
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e4       	ldi	r26, 0x40	; 64
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 39       	cpi	r26, 0x9C	; 156
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <main>
  c6:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <speed>:
	  remove_count = 0;}
}

void speed(unsigned char level)
{
   switch (level)
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	91 f0       	breq	.+36     	; 0xf6 <speed+0x28>
  d2:	84 30       	cpi	r24, 0x04	; 4
  d4:	28 f4       	brcc	.+10     	; 0xe0 <speed+0x12>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	51 f0       	breq	.+20     	; 0xee <speed+0x20>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	b9 f4       	brne	.+46     	; 0x10c <speed+0x3e>
  de:	09 c0       	rjmp	.+18     	; 0xf2 <speed+0x24>
  e0:	85 30       	cpi	r24, 0x05	; 5
  e2:	69 f0       	breq	.+26     	; 0xfe <speed+0x30>
  e4:	85 30       	cpi	r24, 0x05	; 5
  e6:	48 f0       	brcs	.+18     	; 0xfa <speed+0x2c>
  e8:	86 30       	cpi	r24, 0x06	; 6
  ea:	81 f4       	brne	.+32     	; 0x10c <speed+0x3e>
  ec:	0c c0       	rjmp	.+24     	; 0x106 <speed+0x38>
   {
   case 1:
      delay = 250;
  ee:	8a ef       	ldi	r24, 0xFA	; 250
  f0:	07 c0       	rjmp	.+14     	; 0x100 <speed+0x32>
      break;
   case 2:
      delay = 200;
  f2:	88 ec       	ldi	r24, 0xC8	; 200
  f4:	05 c0       	rjmp	.+10     	; 0x100 <speed+0x32>
      break;
   case 3:
      delay = 150;
  f6:	86 e9       	ldi	r24, 0x96	; 150
  f8:	03 c0       	rjmp	.+6      	; 0x100 <speed+0x32>
      break;
   case 4:
      delay = 100;
  fa:	84 e6       	ldi	r24, 0x64	; 100
  fc:	01 c0       	rjmp	.+2      	; 0x100 <speed+0x32>
      break;
   case 5:
      delay = 50;
  fe:	82 e3       	ldi	r24, 0x32	; 50
 100:	80 93 3a 01 	sts	0x013A, r24
      break;
 104:	08 95       	ret
   case 6:
      end_flag = 1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 42 01 	sts	0x0142, r24
 10c:	08 95       	ret

0000010e <Collision>:
unsigned char end_flag = 0;

/**충돌 판단*/
signed char Collision(void)
{
   if (((game_board[cur_line] & temp_line[0]) != 0) | ((game_board[cur_line + 1] & temp_line[1]) != 0) |
 10e:	80 91 66 01 	lds	r24, 0x0166
 112:	90 e0       	ldi	r25, 0x00	; 0
      ((game_board[cur_line + 2] & temp_line[2]) != 0) | ((game_board[cur_line + 3] & temp_line[3]) != 0))
 114:	fc 01       	movw	r30, r24
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	e0 58       	subi	r30, 0x80	; 128
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	20 81       	ld	r18, Z
 120:	31 81       	ldd	r19, Z+1	; 0x01
 122:	40 91 73 01 	lds	r20, 0x0173
 126:	50 91 74 01 	lds	r21, 0x0174
 12a:	24 23       	and	r18, r20
 12c:	35 23       	and	r19, r21
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	21 15       	cp	r18, r1
 134:	31 05       	cpc	r19, r1
 136:	11 f4       	brne	.+4      	; 0x13c <Collision+0x2e>
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	e2 58       	subi	r30, 0x82	; 130
 144:	fe 4f       	sbci	r31, 0xFE	; 254
 146:	20 81       	ld	r18, Z
 148:	31 81       	ldd	r19, Z+1	; 0x01
 14a:	40 91 71 01 	lds	r20, 0x0171
 14e:	50 91 72 01 	lds	r21, 0x0172
 152:	24 23       	and	r18, r20
 154:	35 23       	and	r19, r21
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	21 15       	cp	r18, r1
 15c:	31 05       	cpc	r19, r1
 15e:	11 f4       	brne	.+4      	; 0x164 <Collision+0x56>
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	50 e0       	ldi	r21, 0x00	; 0
unsigned char end_flag = 0;

/**충돌 판단*/
signed char Collision(void)
{
   if (((game_board[cur_line] & temp_line[0]) != 0) | ((game_board[cur_line + 1] & temp_line[1]) != 0) |
 164:	46 2b       	or	r20, r22
 166:	57 2b       	or	r21, r23
 168:	fc 01       	movw	r30, r24
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	e4 58       	subi	r30, 0x84	; 132
 170:	fe 4f       	sbci	r31, 0xFE	; 254
 172:	20 81       	ld	r18, Z
 174:	31 81       	ldd	r19, Z+1	; 0x01
 176:	60 91 6f 01 	lds	r22, 0x016F
 17a:	70 91 70 01 	lds	r23, 0x0170
 17e:	26 23       	and	r18, r22
 180:	37 23       	and	r19, r23
 182:	a1 e0       	ldi	r26, 0x01	; 1
 184:	21 15       	cp	r18, r1
 186:	31 05       	cpc	r19, r1
 188:	09 f4       	brne	.+2      	; 0x18c <Collision+0x7e>
 18a:	a0 e0       	ldi	r26, 0x00	; 0
 18c:	fc 01       	movw	r30, r24
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	e6 58       	subi	r30, 0x86	; 134
 194:	fe 4f       	sbci	r31, 0xFE	; 254
 196:	20 81       	ld	r18, Z
 198:	31 81       	ldd	r19, Z+1	; 0x01
 19a:	60 91 6d 01 	lds	r22, 0x016D
 19e:	70 91 6e 01 	lds	r23, 0x016E
 1a2:	26 23       	and	r18, r22
 1a4:	37 23       	and	r19, r23
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	21 15       	cp	r18, r1
 1aa:	31 05       	cpc	r19, r1
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <Collision+0xa2>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	8a 2b       	or	r24, r26
 1b2:	90 e0       	ldi	r25, 0x00	; 0
      ((game_board[cur_line + 2] & temp_line[2]) != 0) | ((game_board[cur_line + 3] & temp_line[3]) != 0))
 1b4:	84 2b       	or	r24, r20
 1b6:	95 2b       	or	r25, r21
unsigned char end_flag = 0;

/**충돌 판단*/
signed char Collision(void)
{
   if (((game_board[cur_line] & temp_line[0]) != 0) | ((game_board[cur_line + 1] & temp_line[1]) != 0) |
 1b8:	00 97       	sbiw	r24, 0x00	; 0
 1ba:	11 f0       	breq	.+4      	; 0x1c0 <Collision+0xb2>
      ((game_board[cur_line + 2] & temp_line[2]) != 0) | ((game_board[cur_line + 3] & temp_line[3]) != 0))
      return -1;         // 충돌
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	08 95       	ret
   else
      return 0;  // 충돌 없음
 1c0:	80 e0       	ldi	r24, 0x00	; 0
}
 1c2:	08 95       	ret

000001c4 <drop>:

void drop()
{
 1c4:	1f 93       	push	r17
   cur_line++;
 1c6:	10 91 66 01 	lds	r17, 0x0166
 1ca:	81 2f       	mov	r24, r17
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	80 93 66 01 	sts	0x0166, r24

   if (Collision() == -1)
 1d2:	0e 94 87 00 	call	0x10e	; 0x10e <Collision>
 1d6:	8f 3f       	cpi	r24, 0xFF	; 255
 1d8:	09 f0       	breq	.+2      	; 0x1dc <drop+0x18>
 1da:	46 c0       	rjmp	.+140    	; 0x268 <drop+0xa4>
   {
      cur_line--;
 1dc:	10 93 66 01 	sts	0x0166, r17
      game_board[cur_line] = game_board[cur_line] | temp_line[0];
 1e0:	e1 2f       	mov	r30, r17
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	df 01       	movw	r26, r30
 1e6:	aa 0f       	add	r26, r26
 1e8:	bb 1f       	adc	r27, r27
 1ea:	a6 58       	subi	r26, 0x86	; 134
 1ec:	be 4f       	sbci	r27, 0xFE	; 254
 1ee:	8d 91       	ld	r24, X+
 1f0:	9c 91       	ld	r25, X
 1f2:	11 97       	sbiw	r26, 0x01	; 1
 1f4:	20 91 6d 01 	lds	r18, 0x016D
 1f8:	30 91 6e 01 	lds	r19, 0x016E
 1fc:	82 2b       	or	r24, r18
 1fe:	93 2b       	or	r25, r19
 200:	8d 93       	st	X+, r24
 202:	9c 93       	st	X, r25
      game_board[cur_line + 1] = game_board[cur_line + 1] | temp_line[1];
 204:	df 01       	movw	r26, r30
 206:	aa 0f       	add	r26, r26
 208:	bb 1f       	adc	r27, r27
 20a:	a4 58       	subi	r26, 0x84	; 132
 20c:	be 4f       	sbci	r27, 0xFE	; 254
 20e:	8d 91       	ld	r24, X+
 210:	9c 91       	ld	r25, X
 212:	11 97       	sbiw	r26, 0x01	; 1
 214:	20 91 6f 01 	lds	r18, 0x016F
 218:	30 91 70 01 	lds	r19, 0x0170
 21c:	82 2b       	or	r24, r18
 21e:	93 2b       	or	r25, r19
 220:	8d 93       	st	X+, r24
 222:	9c 93       	st	X, r25
      game_board[cur_line + 2] = game_board[cur_line + 2] | temp_line[2];
 224:	df 01       	movw	r26, r30
 226:	aa 0f       	add	r26, r26
 228:	bb 1f       	adc	r27, r27
 22a:	a2 58       	subi	r26, 0x82	; 130
 22c:	be 4f       	sbci	r27, 0xFE	; 254
 22e:	8d 91       	ld	r24, X+
 230:	9c 91       	ld	r25, X
 232:	11 97       	sbiw	r26, 0x01	; 1
 234:	20 91 71 01 	lds	r18, 0x0171
 238:	30 91 72 01 	lds	r19, 0x0172
 23c:	82 2b       	or	r24, r18
 23e:	93 2b       	or	r25, r19
 240:	11 96       	adiw	r26, 0x01	; 1
 242:	9c 93       	st	X, r25
 244:	8e 93       	st	-X, r24
      game_board[cur_line + 3] = game_board[cur_line + 3] | temp_line[3];
 246:	ee 0f       	add	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	e0 58       	subi	r30, 0x80	; 128
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	80 81       	ld	r24, Z
 250:	91 81       	ldd	r25, Z+1	; 0x01
 252:	20 91 73 01 	lds	r18, 0x0173
 256:	30 91 74 01 	lds	r19, 0x0174
 25a:	82 2b       	or	r24, r18
 25c:	93 2b       	or	r25, r19
 25e:	91 83       	std	Z+1, r25	; 0x01
 260:	80 83       	st	Z, r24

      Collision_flag = 1;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 39 01 	sts	0x0139, r24
   }
}
 268:	1f 91       	pop	r17
 26a:	08 95       	ret

0000026c <draw>:

void draw()
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	e6 e5       	ldi	r30, 0x56	; 86
 272:	f1 e0       	ldi	r31, 0x01	; 1
 274:	ca e7       	ldi	r28, 0x7A	; 122
 276:	d1 e0       	ldi	r29, 0x01	; 1
 278:	a6 e4       	ldi	r26, 0x46	; 70
 27a:	b1 e0       	ldi	r27, 0x01	; 1
   int i;
   for (i = 0; i < 16; i++)
   {
      red[i] = 0x00;
 27c:	11 92       	st	Z+, r1
      green[i] = game_board[i] >> 4;
 27e:	89 91       	ld	r24, Y+
 280:	99 91       	ld	r25, Y+
 282:	74 e0       	ldi	r23, 0x04	; 4
 284:	96 95       	lsr	r25
 286:	87 95       	ror	r24
 288:	7a 95       	dec	r23
 28a:	e1 f7       	brne	.-8      	; 0x284 <draw+0x18>
 28c:	8d 93       	st	X+, r24
}

void draw()
{
   int i;
   for (i = 0; i < 16; i++)
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	e6 36       	cpi	r30, 0x66	; 102
 292:	f8 07       	cpc	r31, r24
 294:	99 f7       	brne	.-26     	; 0x27c <draw+0x10>
   {
      red[i] = 0x00;
      green[i] = game_board[i] >> 4;
   }

   red[cur_line] = red[cur_line] | (temp_line[0] >> 4);
 296:	80 91 66 01 	lds	r24, 0x0166
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	fc 01       	movw	r30, r24
 29e:	ea 5a       	subi	r30, 0xAA	; 170
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	20 91 6d 01 	lds	r18, 0x016D
 2a6:	30 91 6e 01 	lds	r19, 0x016E
 2aa:	64 e0       	ldi	r22, 0x04	; 4
 2ac:	36 95       	lsr	r19
 2ae:	27 95       	ror	r18
 2b0:	6a 95       	dec	r22
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <draw+0x40>
 2b4:	40 81       	ld	r20, Z
 2b6:	42 2b       	or	r20, r18
 2b8:	40 83       	st	Z, r20
   red[cur_line + 1] = red[cur_line + 1] | (temp_line[1] >> 4);
 2ba:	fc 01       	movw	r30, r24
 2bc:	e9 5a       	subi	r30, 0xA9	; 169
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	20 91 6f 01 	lds	r18, 0x016F
 2c4:	30 91 70 01 	lds	r19, 0x0170
 2c8:	54 e0       	ldi	r21, 0x04	; 4
 2ca:	36 95       	lsr	r19
 2cc:	27 95       	ror	r18
 2ce:	5a 95       	dec	r21
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <draw+0x5e>
 2d2:	40 81       	ld	r20, Z
 2d4:	42 2b       	or	r20, r18
 2d6:	40 83       	st	Z, r20
   red[cur_line + 2] = red[cur_line + 2] | (temp_line[2] >> 4);
 2d8:	fc 01       	movw	r30, r24
 2da:	e8 5a       	subi	r30, 0xA8	; 168
 2dc:	fe 4f       	sbci	r31, 0xFE	; 254
 2de:	20 91 71 01 	lds	r18, 0x0171
 2e2:	30 91 72 01 	lds	r19, 0x0172
 2e6:	44 e0       	ldi	r20, 0x04	; 4
 2e8:	36 95       	lsr	r19
 2ea:	27 95       	ror	r18
 2ec:	4a 95       	dec	r20
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <draw+0x7c>
 2f0:	40 81       	ld	r20, Z
 2f2:	42 2b       	or	r20, r18
 2f4:	40 83       	st	Z, r20
   red[cur_line + 3] = red[cur_line + 3] | (temp_line[3] >> 4);
 2f6:	fc 01       	movw	r30, r24
 2f8:	e7 5a       	subi	r30, 0xA7	; 167
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	20 91 73 01 	lds	r18, 0x0173
 300:	30 91 74 01 	lds	r19, 0x0174
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	36 95       	lsr	r19
 308:	27 95       	ror	r18
 30a:	8a 95       	dec	r24
 30c:	e1 f7       	brne	.-8      	; 0x306 <draw+0x9a>
 30e:	80 81       	ld	r24, Z
 310:	82 2b       	or	r24, r18
 312:	80 83       	st	Z, r24
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <NewTetriminos>:


void NewTetriminos(void)
{

   shape = rand() % 7;
 31a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <rand>
 31e:	67 e0       	ldi	r22, 0x07	; 7
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	0e 94 7f 05 	call	0xafe	; 0xafe <__divmodhi4>
 326:	80 93 76 01 	sts	0x0176, r24
   pattern = 0;
 32a:	10 92 68 01 	sts	0x0168, r1

   temp_line[0] = (tetriminos[shape][pattern] & 0xF000) >> 6;
 32e:	e8 2f       	mov	r30, r24
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	ee 0f       	add	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	8a 95       	dec	r24
 33a:	e1 f7       	brne	.-8      	; 0x334 <NewTetriminos+0x1a>
 33c:	e0 50       	subi	r30, 0x00	; 0
 33e:	ff 4f       	sbci	r31, 0xFF	; 255
 340:	80 81       	ld	r24, Z
 342:	91 81       	ldd	r25, Z+1	; 0x01
 344:	9c 01       	movw	r18, r24
 346:	20 70       	andi	r18, 0x00	; 0
 348:	30 7f       	andi	r19, 0xF0	; 240
 34a:	b6 e0       	ldi	r27, 0x06	; 6
 34c:	36 95       	lsr	r19
 34e:	27 95       	ror	r18
 350:	ba 95       	dec	r27
 352:	e1 f7       	brne	.-8      	; 0x34c <NewTetriminos+0x32>
 354:	30 93 6e 01 	sts	0x016E, r19
 358:	20 93 6d 01 	sts	0x016D, r18
   temp_line[1] = (tetriminos[shape][pattern] & 0x0F00) >> 2;
 35c:	9c 01       	movw	r18, r24
 35e:	20 70       	andi	r18, 0x00	; 0
 360:	3f 70       	andi	r19, 0x0F	; 15
 362:	36 95       	lsr	r19
 364:	27 95       	ror	r18
 366:	36 95       	lsr	r19
 368:	27 95       	ror	r18
 36a:	30 93 70 01 	sts	0x0170, r19
 36e:	20 93 6f 01 	sts	0x016F, r18
   temp_line[2] = (tetriminos[shape][pattern] & 0x00F0) << 2;
 372:	9c 01       	movw	r18, r24
 374:	20 7f       	andi	r18, 0xF0	; 240
 376:	30 70       	andi	r19, 0x00	; 0
 378:	22 0f       	add	r18, r18
 37a:	33 1f       	adc	r19, r19
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	30 93 72 01 	sts	0x0172, r19
 384:	20 93 71 01 	sts	0x0171, r18
   temp_line[3] = (tetriminos[shape][pattern] & 0x000F) << 6;
 388:	8f 70       	andi	r24, 0x0F	; 15
 38a:	90 70       	andi	r25, 0x00	; 0
 38c:	e6 e0       	ldi	r30, 0x06	; 6
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	ea 95       	dec	r30
 394:	e1 f7       	brne	.-8      	; 0x38e <NewTetriminos+0x74>
 396:	90 93 74 01 	sts	0x0174, r25
 39a:	80 93 73 01 	sts	0x0173, r24

   cur_line = 0;                 // 테트리미노스 현재 라인 (최상위 라인)
 39e:	10 92 66 01 	sts	0x0166, r1
   cur_col = 9;
 3a2:	89 e0       	ldi	r24, 0x09	; 9
 3a4:	80 93 67 01 	sts	0x0167, r24
   Collision_flag = 0;
 3a8:	10 92 39 01 	sts	0x0139, r1

   if (Collision() == -1)
 3ac:	0e 94 87 00 	call	0x10e	; 0x10e <Collision>
 3b0:	8f 3f       	cpi	r24, 0xFF	; 255
 3b2:	19 f4       	brne	.+6      	; 0x3ba <NewTetriminos+0xa0>
      end_flag = 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	80 93 42 01 	sts	0x0142, r24
 3ba:	08 95       	ret

000003bc <spin>:
}

void spin()
{
 3bc:	ff 92       	push	r15
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
   pattern++;
 3c6:	80 91 68 01 	lds	r24, 0x0168
 3ca:	8f 5f       	subi	r24, 0xFF	; 255
 3cc:	80 93 68 01 	sts	0x0168, r24
   if (pattern == 4)
 3d0:	84 30       	cpi	r24, 0x04	; 4
 3d2:	11 f4       	brne	.+4      	; 0x3d8 <spin+0x1c>
      pattern = 0;
 3d4:	10 92 68 01 	sts	0x0168, r1

   temp_line[0] = ((tetriminos[shape][pattern] & 0xF000) >> 12) << (cur_col - 3);
 3d8:	00 91 76 01 	lds	r16, 0x0176
 3dc:	10 e0       	ldi	r17, 0x00	; 0
 3de:	f0 90 68 01 	lds	r15, 0x0168
 3e2:	00 0f       	add	r16, r16
 3e4:	11 1f       	adc	r17, r17
 3e6:	00 0f       	add	r16, r16
 3e8:	11 1f       	adc	r17, r17
 3ea:	f8 01       	movw	r30, r16
 3ec:	ef 0d       	add	r30, r15
 3ee:	f1 1d       	adc	r31, r1
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	e0 50       	subi	r30, 0x00	; 0
 3f6:	ff 4f       	sbci	r31, 0xFF	; 255
 3f8:	20 81       	ld	r18, Z
 3fa:	31 81       	ldd	r19, Z+1	; 0x01
 3fc:	80 91 67 01 	lds	r24, 0x0167
 400:	c8 2f       	mov	r28, r24
 402:	d0 e0       	ldi	r29, 0x00	; 0
 404:	23 97       	sbiw	r28, 0x03	; 3
 406:	c9 01       	movw	r24, r18
 408:	89 2f       	mov	r24, r25
 40a:	99 27       	eor	r25, r25
 40c:	82 95       	swap	r24
 40e:	8f 70       	andi	r24, 0x0F	; 15
 410:	ae 01       	movw	r20, r28
 412:	0c 2e       	mov	r0, r28
 414:	02 c0       	rjmp	.+4      	; 0x41a <spin+0x5e>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	0a 94       	dec	r0
 41c:	e2 f7       	brpl	.-8      	; 0x416 <spin+0x5a>
 41e:	90 93 6e 01 	sts	0x016E, r25
 422:	80 93 6d 01 	sts	0x016D, r24
   temp_line[1] = ((tetriminos[shape][pattern] & 0x0F00) >> 8) << (cur_col - 3);
 426:	c9 01       	movw	r24, r18
 428:	80 70       	andi	r24, 0x00	; 0
 42a:	9f 70       	andi	r25, 0x0F	; 15
 42c:	89 2f       	mov	r24, r25
 42e:	99 27       	eor	r25, r25
 430:	04 2e       	mov	r0, r20
 432:	02 c0       	rjmp	.+4      	; 0x438 <spin+0x7c>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	0a 94       	dec	r0
 43a:	e2 f7       	brpl	.-8      	; 0x434 <spin+0x78>
 43c:	90 93 70 01 	sts	0x0170, r25
 440:	80 93 6f 01 	sts	0x016F, r24
   temp_line[2] = ((tetriminos[shape][pattern] & 0x00F0) >> 4) << (cur_col - 3);
 444:	c9 01       	movw	r24, r18
 446:	80 7f       	andi	r24, 0xF0	; 240
 448:	90 70       	andi	r25, 0x00	; 0
 44a:	b4 e0       	ldi	r27, 0x04	; 4
 44c:	96 95       	lsr	r25
 44e:	87 95       	ror	r24
 450:	ba 95       	dec	r27
 452:	e1 f7       	brne	.-8      	; 0x44c <spin+0x90>
 454:	04 2e       	mov	r0, r20
 456:	02 c0       	rjmp	.+4      	; 0x45c <spin+0xa0>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	0a 94       	dec	r0
 45e:	e2 f7       	brpl	.-8      	; 0x458 <spin+0x9c>
 460:	90 93 72 01 	sts	0x0172, r25
 464:	80 93 71 01 	sts	0x0171, r24
   temp_line[3] = (tetriminos[shape][pattern] & 0x000F) << (cur_col - 3);
 468:	2f 70       	andi	r18, 0x0F	; 15
 46a:	30 70       	andi	r19, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <spin+0xb6>
 46e:	22 0f       	add	r18, r18
 470:	33 1f       	adc	r19, r19
 472:	4a 95       	dec	r20
 474:	e2 f7       	brpl	.-8      	; 0x46e <spin+0xb2>
 476:	30 93 74 01 	sts	0x0174, r19
 47a:	20 93 73 01 	sts	0x0173, r18

   if (Collision() == -1)
 47e:	0e 94 87 00 	call	0x10e	; 0x10e <Collision>
 482:	8f 3f       	cpi	r24, 0xFF	; 255
 484:	09 f0       	breq	.+2      	; 0x488 <spin+0xcc>
 486:	47 c0       	rjmp	.+142    	; 0x516 <spin+0x15a>
   {
      pattern--;
 488:	fa 94       	dec	r15
 48a:	f0 92 68 01 	sts	0x0168, r15
      temp_line[0] = ((tetriminos[shape][pattern] & 0xF000) >> 12) << (cur_col - 3);
 48e:	f8 01       	movw	r30, r16
 490:	ef 0d       	add	r30, r15
 492:	f1 1d       	adc	r31, r1
 494:	ee 0f       	add	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	e0 50       	subi	r30, 0x00	; 0
 49a:	ff 4f       	sbci	r31, 0xFF	; 255
 49c:	20 81       	ld	r18, Z
 49e:	31 81       	ldd	r19, Z+1	; 0x01
 4a0:	c9 01       	movw	r24, r18
 4a2:	89 2f       	mov	r24, r25
 4a4:	99 27       	eor	r25, r25
 4a6:	82 95       	swap	r24
 4a8:	8f 70       	andi	r24, 0x0F	; 15
 4aa:	ae 01       	movw	r20, r28
 4ac:	0c 2e       	mov	r0, r28
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <spin+0xf8>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <spin+0xf4>
 4b8:	90 93 6e 01 	sts	0x016E, r25
 4bc:	80 93 6d 01 	sts	0x016D, r24
      temp_line[1] = ((tetriminos[shape][pattern] & 0x0F00) >> 8) << (cur_col - 3);
 4c0:	c9 01       	movw	r24, r18
 4c2:	80 70       	andi	r24, 0x00	; 0
 4c4:	9f 70       	andi	r25, 0x0F	; 15
 4c6:	89 2f       	mov	r24, r25
 4c8:	99 27       	eor	r25, r25
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <spin+0x114>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	ca 95       	dec	r28
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <spin+0x110>
 4d4:	90 93 70 01 	sts	0x0170, r25
 4d8:	80 93 6f 01 	sts	0x016F, r24
      temp_line[2] = ((tetriminos[shape][pattern] & 0x00F0) >> 4) << (cur_col - 3);
 4dc:	c9 01       	movw	r24, r18
 4de:	80 7f       	andi	r24, 0xF0	; 240
 4e0:	90 70       	andi	r25, 0x00	; 0
 4e2:	54 e0       	ldi	r21, 0x04	; 4
 4e4:	96 95       	lsr	r25
 4e6:	87 95       	ror	r24
 4e8:	5a 95       	dec	r21
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <spin+0x128>
 4ec:	04 2e       	mov	r0, r20
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <spin+0x138>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	0a 94       	dec	r0
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <spin+0x134>
 4f8:	90 93 72 01 	sts	0x0172, r25
 4fc:	80 93 71 01 	sts	0x0171, r24
      temp_line[3] = (tetriminos[shape][pattern] & 0x000F) << (cur_col - 3);
 500:	2f 70       	andi	r18, 0x0F	; 15
 502:	30 70       	andi	r19, 0x00	; 0
 504:	02 c0       	rjmp	.+4      	; 0x50a <spin+0x14e>
 506:	22 0f       	add	r18, r18
 508:	33 1f       	adc	r19, r19
 50a:	4a 95       	dec	r20
 50c:	e2 f7       	brpl	.-8      	; 0x506 <spin+0x14a>
 50e:	30 93 74 01 	sts	0x0174, r19
 512:	20 93 73 01 	sts	0x0173, r18
   }
}
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	ff 90       	pop	r15
 520:	08 95       	ret

00000522 <move>:


void move(int n)
{
 522:	bf 92       	push	r11
 524:	cf 92       	push	r12
 526:	df 92       	push	r13
 528:	ef 92       	push	r14
 52a:	ff 92       	push	r15
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
   switch (n) {
 534:	8b 34       	cpi	r24, 0x4B	; 75
 536:	91 05       	cpc	r25, r1
 538:	41 f0       	breq	.+16     	; 0x54a <move+0x28>
 53a:	8d 34       	cpi	r24, 0x4D	; 77
 53c:	91 05       	cpc	r25, r1
 53e:	51 f0       	breq	.+20     	; 0x554 <move+0x32>
 540:	88 34       	cpi	r24, 0x48	; 72
 542:	91 05       	cpc	r25, r1
 544:	09 f0       	breq	.+2      	; 0x548 <move+0x26>
 546:	96 c0       	rjmp	.+300    	; 0x674 <move+0x152>
 548:	93 c0       	rjmp	.+294    	; 0x670 <move+0x14e>
   case 0:
      break;
   case LEFT: //왼쪽키 눌렀을때 

      cur_col++;
 54a:	b0 90 67 01 	lds	r11, 0x0167
 54e:	2b 2d       	mov	r18, r11
 550:	2f 5f       	subi	r18, 0xFF	; 255
 552:	04 c0       	rjmp	.+8      	; 0x55c <move+0x3a>
         temp_line[3] = (tetriminos[shape][pattern] & 0x000F) << (cur_col - 3);
      }

      break;                     //왼쪽으로 갈 수 있는지 체크 후 가능하면 이동
   case RIGHT: //오른쪽 방향키 눌렀을때- 위와 동일하게 처리됨 
      cur_col--;
 554:	b0 90 67 01 	lds	r11, 0x0167
 558:	2b 2d       	mov	r18, r11
 55a:	21 50       	subi	r18, 0x01	; 1
 55c:	20 93 67 01 	sts	0x0167, r18
      temp_line[0] = ((tetriminos[shape][pattern] & 0xF000) >> 12) << (cur_col - 3);
 560:	80 91 68 01 	lds	r24, 0x0168
 564:	e0 91 76 01 	lds	r30, 0x0176
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	ee 0f       	add	r30, r30
 56c:	ff 1f       	adc	r31, r31
 56e:	ee 0f       	add	r30, r30
 570:	ff 1f       	adc	r31, r31
 572:	e8 0f       	add	r30, r24
 574:	f1 1d       	adc	r31, r1
 576:	ee 0f       	add	r30, r30
 578:	ff 1f       	adc	r31, r31
 57a:	e0 50       	subi	r30, 0x00	; 0
 57c:	ff 4f       	sbci	r31, 0xFF	; 255
 57e:	40 81       	ld	r20, Z
 580:	51 81       	ldd	r21, Z+1	; 0x01
 582:	7a 01       	movw	r14, r20
 584:	ef 2c       	mov	r14, r15
 586:	ff 24       	eor	r15, r15
 588:	e2 94       	swap	r14
 58a:	1f e0       	ldi	r17, 0x0F	; 15
 58c:	e1 22       	and	r14, r17
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	23 50       	subi	r18, 0x03	; 3
 592:	30 40       	sbci	r19, 0x00	; 0
 594:	c7 01       	movw	r24, r14
 596:	02 2e       	mov	r0, r18
 598:	02 c0       	rjmp	.+4      	; 0x59e <move+0x7c>
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	0a 94       	dec	r0
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <move+0x78>
 5a2:	90 93 6e 01 	sts	0x016E, r25
 5a6:	80 93 6d 01 	sts	0x016D, r24
      temp_line[1] = ((tetriminos[shape][pattern] & 0x0F00) >> 8) << (cur_col - 3);
 5aa:	8a 01       	movw	r16, r20
 5ac:	00 70       	andi	r16, 0x00	; 0
 5ae:	1f 70       	andi	r17, 0x0F	; 15
 5b0:	01 2f       	mov	r16, r17
 5b2:	11 27       	eor	r17, r17
 5b4:	c8 01       	movw	r24, r16
 5b6:	02 2e       	mov	r0, r18
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <move+0x9c>
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	0a 94       	dec	r0
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <move+0x98>
 5c2:	90 93 70 01 	sts	0x0170, r25
 5c6:	80 93 6f 01 	sts	0x016F, r24
      temp_line[2] = ((tetriminos[shape][pattern] & 0x00F0) >> 4) << (cur_col - 3);
 5ca:	ea 01       	movw	r28, r20
 5cc:	c0 7f       	andi	r28, 0xF0	; 240
 5ce:	d0 70       	andi	r29, 0x00	; 0
 5d0:	a4 e0       	ldi	r26, 0x04	; 4
 5d2:	d6 95       	lsr	r29
 5d4:	c7 95       	ror	r28
 5d6:	aa 95       	dec	r26
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <move+0xb0>
 5da:	ce 01       	movw	r24, r28
 5dc:	02 2e       	mov	r0, r18
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <move+0xc2>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	0a 94       	dec	r0
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <move+0xbe>
 5e8:	90 93 72 01 	sts	0x0172, r25
 5ec:	80 93 71 01 	sts	0x0171, r24
      temp_line[3] = (tetriminos[shape][pattern] & 0x000F) << (cur_col - 3);
 5f0:	ff e0       	ldi	r31, 0x0F	; 15
 5f2:	cf 2e       	mov	r12, r31
 5f4:	d1 2c       	mov	r13, r1
 5f6:	c4 22       	and	r12, r20
 5f8:	d5 22       	and	r13, r21
 5fa:	c6 01       	movw	r24, r12
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <move+0xe0>
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	2a 95       	dec	r18
 604:	e2 f7       	brpl	.-8      	; 0x5fe <move+0xdc>
 606:	90 93 74 01 	sts	0x0174, r25
 60a:	80 93 73 01 	sts	0x0173, r24

      if (Collision() == -1)
 60e:	0e 94 87 00 	call	0x10e	; 0x10e <Collision>
 612:	8f 3f       	cpi	r24, 0xFF	; 255
 614:	79 f5       	brne	.+94     	; 0x674 <move+0x152>
      {
         cur_col++;
 616:	b0 92 67 01 	sts	0x0167, r11
         temp_line[0] = ((tetriminos[shape][pattern] & 0xF000) >> 12) << (cur_col - 3);
 61a:	8b 2d       	mov	r24, r11
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	03 97       	sbiw	r24, 0x03	; 3
 620:	08 2e       	mov	r0, r24
 622:	02 c0       	rjmp	.+4      	; 0x628 <move+0x106>
 624:	ee 0c       	add	r14, r14
 626:	ff 1c       	adc	r15, r15
 628:	0a 94       	dec	r0
 62a:	e2 f7       	brpl	.-8      	; 0x624 <move+0x102>
 62c:	f0 92 6e 01 	sts	0x016E, r15
 630:	e0 92 6d 01 	sts	0x016D, r14
         temp_line[1] = ((tetriminos[shape][pattern] & 0x0F00) >> 8) << (cur_col - 3);
 634:	08 2e       	mov	r0, r24
 636:	02 c0       	rjmp	.+4      	; 0x63c <move+0x11a>
 638:	00 0f       	add	r16, r16
 63a:	11 1f       	adc	r17, r17
 63c:	0a 94       	dec	r0
 63e:	e2 f7       	brpl	.-8      	; 0x638 <move+0x116>
 640:	10 93 70 01 	sts	0x0170, r17
 644:	00 93 6f 01 	sts	0x016F, r16
         temp_line[2] = ((tetriminos[shape][pattern] & 0x00F0) >> 4) << (cur_col - 3);
 648:	08 2e       	mov	r0, r24
 64a:	02 c0       	rjmp	.+4      	; 0x650 <move+0x12e>
 64c:	cc 0f       	add	r28, r28
 64e:	dd 1f       	adc	r29, r29
 650:	0a 94       	dec	r0
 652:	e2 f7       	brpl	.-8      	; 0x64c <move+0x12a>
 654:	d0 93 72 01 	sts	0x0172, r29
 658:	c0 93 71 01 	sts	0x0171, r28
         temp_line[3] = (tetriminos[shape][pattern] & 0x000F) << (cur_col - 3);
 65c:	02 c0       	rjmp	.+4      	; 0x662 <move+0x140>
 65e:	cc 0c       	add	r12, r12
 660:	dd 1c       	adc	r13, r13
 662:	8a 95       	dec	r24
 664:	e2 f7       	brpl	.-8      	; 0x65e <move+0x13c>
 666:	d0 92 74 01 	sts	0x0174, r13
 66a:	c0 92 73 01 	sts	0x0173, r12
 66e:	02 c0       	rjmp	.+4      	; 0x674 <move+0x152>
      break;
   case DOWN: //아래쪽 방향키 눌렀을때-위와 동일하게 처리됨 
            //      delay = 0;
      break;
   case UP: //위쪽 방향키 눌렀을때 
      spin();
 670:	0e 94 de 01 	call	0x3bc	; 0x3bc <spin>
      break;
      //회전할 수 있는지 체크 후 가능하면 회전
   }

}
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	df 90       	pop	r13
 682:	cf 90       	pop	r12
 684:	bf 90       	pop	r11
 686:	08 95       	ret

00000688 <remove>:

void remove()
{
   int i, j = 0;
   for (i = 0; i < 16; i++)
 688:	60 91 41 01 	lds	r22, 0x0141
 68c:	aa e7       	ldi	r26, 0x7A	; 122
 68e:	b1 e0       	ldi	r27, 0x01	; 1
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	90 e0       	ldi	r25, 0x00	; 0
   {
      if (game_board[i] == 0x7FFE)
 694:	2d 91       	ld	r18, X+
 696:	3d 91       	ld	r19, X+
 698:	4f e7       	ldi	r20, 0x7F	; 127
 69a:	2e 3f       	cpi	r18, 0xFE	; 254
 69c:	34 07       	cpc	r19, r20
 69e:	89 f4       	brne	.+34     	; 0x6c2 <remove+0x3a>
      {
         remove_count++;
 6a0:	6f 5f       	subi	r22, 0xFF	; 255
      //회전할 수 있는지 체크 후 가능하면 회전
   }

}

void remove()
 6a2:	fc 01       	movw	r30, r24
 6a4:	ee 0f       	add	r30, r30
 6a6:	ff 1f       	adc	r31, r31
 6a8:	e6 58       	subi	r30, 0x86	; 134
 6aa:	fe 4f       	sbci	r31, 0xFE	; 254
   for (i = 0; i < 16; i++)
   {
      if (game_board[i] == 0x7FFE)
      {
         remove_count++;
         for (j = i; j > 0; j--)
 6ac:	9c 01       	movw	r18, r24
 6ae:	06 c0       	rjmp	.+12     	; 0x6bc <remove+0x34>
         {
            game_board[j] = game_board[j - 1];
 6b0:	52 91       	ld	r21, -Z
 6b2:	42 91       	ld	r20, -Z
 6b4:	53 83       	std	Z+3, r21	; 0x03
 6b6:	42 83       	std	Z+2, r20	; 0x02
   for (i = 0; i < 16; i++)
   {
      if (game_board[i] == 0x7FFE)
      {
         remove_count++;
         for (j = i; j > 0; j--)
 6b8:	21 50       	subi	r18, 0x01	; 1
 6ba:	30 40       	sbci	r19, 0x00	; 0
 6bc:	12 16       	cp	r1, r18
 6be:	13 06       	cpc	r1, r19
 6c0:	bc f3       	brlt	.-18     	; 0x6b0 <remove+0x28>
}

void remove()
{
   int i, j = 0;
   for (i = 0; i < 16; i++)
 6c2:	01 96       	adiw	r24, 0x01	; 1
 6c4:	80 31       	cpi	r24, 0x10	; 16
 6c6:	91 05       	cpc	r25, r1
 6c8:	29 f7       	brne	.-54     	; 0x694 <remove+0xc>
 6ca:	60 93 41 01 	sts	0x0141, r22
            game_board[j] = game_board[j - 1];
            
         }
      }
   }
   if (remove_count == 5){
 6ce:	65 30       	cpi	r22, 0x05	; 5
 6d0:	51 f4       	brne	.+20     	; 0x6e6 <remove+0x5e>
      level++;
 6d2:	80 91 38 01 	lds	r24, 0x0138
 6d6:	8f 5f       	subi	r24, 0xFF	; 255
 6d8:	80 93 38 01 	sts	0x0138, r24
	  speed(level);
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	0e 94 67 00 	call	0xce	; 0xce <speed>
	  remove_count = 0;}
 6e2:	10 92 41 01 	sts	0x0141, r1
 6e6:	08 95       	ret

000006e8 <main>:
      end_flag = 1;
   }
}

int main()
{
 6e8:	df 93       	push	r29
 6ea:	cf 93       	push	r28
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
 6f0:	2a 97       	sbiw	r28, 0x0a	; 10
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	f8 94       	cli
 6f6:	de bf       	out	0x3e, r29	; 62
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	cd bf       	out	0x3d, r28	; 61
   DDRB = 0xff;
 6fc:	8f ef       	ldi	r24, 0xFF	; 255
 6fe:	87 bb       	out	0x17, r24	; 23
   DDRC = 0xff;
 700:	84 bb       	out	0x14, r24	; 20
   PORTB = 0x00;
 702:	18 ba       	out	0x18, r1	; 24
   PORTC = 0x00;
 704:	15 ba       	out	0x15, r1	; 21
 706:	ea e7       	ldi	r30, 0x7A	; 122
 708:	f1 e0       	ldi	r31, 0x01	; 1
   int i = 0;

   for (i = 0; i < 20; i++)
      game_board[i] = 0x700E;   // 0111000000001110
 70a:	8e e0       	ldi	r24, 0x0E	; 14
 70c:	90 e7       	ldi	r25, 0x70	; 112
 70e:	81 93       	st	Z+, r24
 710:	91 93       	st	Z+, r25
   DDRC = 0xff;
   PORTB = 0x00;
   PORTC = 0x00;
   int i = 0;

   for (i = 0; i < 20; i++)
 712:	21 e0       	ldi	r18, 0x01	; 1
 714:	e2 3a       	cpi	r30, 0xA2	; 162
 716:	f2 07       	cpc	r31, r18
 718:	d1 f7       	brne	.-12     	; 0x70e <main+0x26>
      game_board[i] = 0x700E;   // 0111000000001110

   game_board[16] = 0xFFFF;
 71a:	8f ef       	ldi	r24, 0xFF	; 255
 71c:	9f ef       	ldi	r25, 0xFF	; 255
 71e:	90 93 9b 01 	sts	0x019B, r25
 722:	80 93 9a 01 	sts	0x019A, r24
   dot_matrix dot_show;			//도트 매트릭스 구조체 선언

   dot_show.row = Dot_portSet(&PORTB, 0);		//행 포트, 시작 핀번호 설정
 726:	88 e3       	ldi	r24, 0x38	; 56
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	60 e0       	ldi	r22, 0x00	; 0
 72c:	0e 94 6e 05 	call	0xadc	; 0xadc <Dot_portSet>
 730:	69 83       	std	Y+1, r22	; 0x01
 732:	7a 83       	std	Y+2, r23	; 0x02
 734:	8b 83       	std	Y+3, r24	; 0x03
   dot_show.col = Dot_portSet(&PORTC, 0);		//열 포트, 시작 핀번호 설정
 736:	85 e3       	ldi	r24, 0x35	; 53
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	0e 94 6e 05 	call	0xadc	; 0xadc <Dot_portSet>
 740:	6c 83       	std	Y+4, r22	; 0x04
 742:	7d 83       	std	Y+5, r23	; 0x05
 744:	8e 83       	std	Y+6, r24	; 0x06
   dot_show.greenPtr.all = green;				//초록색 출력할 배열 데이터 설정
 746:	86 e4       	ldi	r24, 0x46	; 70
 748:	91 e0       	ldi	r25, 0x01	; 1
 74a:	9a 87       	std	Y+10, r25	; 0x0a
 74c:	89 87       	std	Y+9, r24	; 0x09
   dot_show.redPtr.all = red;					//빨간색 출력할 배열 데이터 설정
 74e:	86 e5       	ldi	r24, 0x56	; 86
 750:	91 e0       	ldi	r25, 0x01	; 1
 752:	98 87       	std	Y+8, r25	; 0x08
 754:	8f 83       	std	Y+7, r24	; 0x07
   Dot_init(&dot_show);							//도트매트릭스 초기화
 756:	ce 01       	movw	r24, r28
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	0e 94 9c 04 	call	0x938	; 0x938 <Dot_init>

	//인터럽트 셋팅
   EIMSK = 0x03;
 75e:	83 e0       	ldi	r24, 0x03	; 3
 760:	89 bf       	out	0x39, r24	; 57
   EICRA = 0b0000001010;
 762:	8a e0       	ldi	r24, 0x0A	; 10
 764:	80 93 6a 00 	sts	0x006A, r24

	//ADC(Pad) 포트 초기화
   ADMUX = 0x40;
 768:	80 e4       	ldi	r24, 0x40	; 64
 76a:	87 b9       	out	0x07, r24	; 7
   ADCSRA = 0b11101111;
 76c:	8f ee       	ldi	r24, 0xEF	; 239
 76e:	86 b9       	out	0x06, r24	; 6

	//타이머 초기화
   TIMSK = 1;
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	87 bf       	out	0x37, r24	; 55
   TCCR0 = 6;
 774:	86 e0       	ldi	r24, 0x06	; 6
 776:	83 bf       	out	0x33, r24	; 51
   TCNT0 = 6;
 778:	82 bf       	out	0x32, r24	; 50
   SREG = 0x80;
 77a:	80 e8       	ldi	r24, 0x80	; 128
 77c:	8f bf       	out	0x3f, r24	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 77e:	81 ee       	ldi	r24, 0xE1	; 225
 780:	94 e0       	ldi	r25, 0x04	; 4
 782:	01 97       	sbiw	r24, 0x01	; 1
 784:	f1 f7       	brne	.-4      	; 0x782 <main+0x9a>
 786:	00 c0       	rjmp	.+0      	; 0x788 <main+0xa0>
 788:	00 00       	nop

	//랜덤 시드 생성
   _delay_ms(5);
   srand(ADC);
 78a:	84 b1       	in	r24, 0x04	; 4
 78c:	95 b1       	in	r25, 0x05	; 5
 78e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <srand>
   while (1)
   {
      if (Collision_flag == 1)
 792:	80 91 39 01 	lds	r24, 0x0139
 796:	81 30       	cpi	r24, 0x01	; 1
 798:	11 f4       	brne	.+4      	; 0x79e <main+0xb6>
         NewTetriminos();
 79a:	0e 94 8d 01 	call	0x31a	; 0x31a <NewTetriminos>

      if (end_flag == 1)
 79e:	80 91 42 01 	lds	r24, 0x0142
 7a2:	81 30       	cpi	r24, 0x01	; 1
 7a4:	71 f4       	brne	.+28     	; 0x7c2 <main+0xda>
      {
         Dot_disp(OFF);
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	0e 94 c5 04 	call	0x98a	; 0x98a <Dot_disp>

      draw();
      Dot_disp(ALL);
      remove();
   }
}
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	2a 96       	adiw	r28, 0x0a	; 10
 7b2:	0f b6       	in	r0, 0x3f	; 63
 7b4:	f8 94       	cli
 7b6:	de bf       	out	0x3e, r29	; 62
 7b8:	0f be       	out	0x3f, r0	; 63
 7ba:	cd bf       	out	0x3d, r28	; 61
 7bc:	cf 91       	pop	r28
 7be:	df 91       	pop	r29
 7c0:	08 95       	ret
         Dot_disp(OFF);
		 break;
      }


      draw();
 7c2:	0e 94 36 01 	call	0x26c	; 0x26c <draw>
      Dot_disp(ALL);
 7c6:	83 e0       	ldi	r24, 0x03	; 3
 7c8:	0e 94 c5 04 	call	0x98a	; 0x98a <Dot_disp>
      remove();
 7cc:	0e 94 44 03 	call	0x688	; 0x688 <remove>
   }
 7d0:	e0 cf       	rjmp	.-64     	; 0x792 <main+0xaa>

000007d2 <__vector_1>:
}

ISR(INT0_vect)
{
 7d2:	1f 92       	push	r1
 7d4:	0f 92       	push	r0
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	0f 92       	push	r0
 7da:	0b b6       	in	r0, 0x3b	; 59
 7dc:	0f 92       	push	r0
 7de:	11 24       	eor	r1, r1
 7e0:	2f 93       	push	r18
 7e2:	3f 93       	push	r19
 7e4:	4f 93       	push	r20
 7e6:	5f 93       	push	r21
 7e8:	6f 93       	push	r22
 7ea:	7f 93       	push	r23
 7ec:	8f 93       	push	r24
 7ee:	9f 93       	push	r25
 7f0:	af 93       	push	r26
 7f2:	bf 93       	push	r27
 7f4:	ef 93       	push	r30
 7f6:	ff 93       	push	r31
   spin();
 7f8:	0e 94 de 01 	call	0x3bc	; 0x3bc <spin>
}
 7fc:	ff 91       	pop	r31
 7fe:	ef 91       	pop	r30
 800:	bf 91       	pop	r27
 802:	af 91       	pop	r26
 804:	9f 91       	pop	r25
 806:	8f 91       	pop	r24
 808:	7f 91       	pop	r23
 80a:	6f 91       	pop	r22
 80c:	5f 91       	pop	r21
 80e:	4f 91       	pop	r20
 810:	3f 91       	pop	r19
 812:	2f 91       	pop	r18
 814:	0f 90       	pop	r0
 816:	0b be       	out	0x3b, r0	; 59
 818:	0f 90       	pop	r0
 81a:	0f be       	out	0x3f, r0	; 63
 81c:	0f 90       	pop	r0
 81e:	1f 90       	pop	r1
 820:	18 95       	reti

00000822 <__vector_16>:

ISR(TIMER0_OVF_vect) {
 822:	1f 92       	push	r1
 824:	0f 92       	push	r0
 826:	0f b6       	in	r0, 0x3f	; 63
 828:	0f 92       	push	r0
 82a:	0b b6       	in	r0, 0x3b	; 59
 82c:	0f 92       	push	r0
 82e:	11 24       	eor	r1, r1
 830:	2f 93       	push	r18
 832:	3f 93       	push	r19
 834:	4f 93       	push	r20
 836:	5f 93       	push	r21
 838:	6f 93       	push	r22
 83a:	7f 93       	push	r23
 83c:	8f 93       	push	r24
 83e:	9f 93       	push	r25
 840:	af 93       	push	r26
 842:	bf 93       	push	r27
 844:	ef 93       	push	r30
 846:	ff 93       	push	r31
   count++;
 848:	80 91 75 01 	lds	r24, 0x0175
 84c:	8f 5f       	subi	r24, 0xFF	; 255
 84e:	80 93 75 01 	sts	0x0175, r24
   pad_count++;
 852:	80 91 77 01 	lds	r24, 0x0177
 856:	8f 5f       	subi	r24, 0xFF	; 255
 858:	80 93 77 01 	sts	0x0177, r24
   TCNT0 = 6;
 85c:	96 e0       	ldi	r25, 0x06	; 6
 85e:	92 bf       	out	0x32, r25	; 50
   if (pad_count == PAD_SENSITIVITY)
 860:	8e 31       	cpi	r24, 0x1E	; 30
 862:	29 f5       	brne	.+74     	; 0x8ae <__vector_16+0x8c>
   {
      if (adc[0]>500)	//왼쪽
 864:	80 91 69 01 	lds	r24, 0x0169
 868:	90 91 6a 01 	lds	r25, 0x016A
 86c:	21 e0       	ldi	r18, 0x01	; 1
 86e:	85 3f       	cpi	r24, 0xF5	; 245
 870:	92 07       	cpc	r25, r18
 872:	18 f0       	brcs	.+6      	; 0x87a <__vector_16+0x58>
      {
         move(LEFT);
 874:	8b e4       	ldi	r24, 0x4B	; 75
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	06 c0       	rjmp	.+12     	; 0x886 <__vector_16+0x64>
      }
      else if (adc[0]<300)	//오른쪽
 87a:	21 e0       	ldi	r18, 0x01	; 1
 87c:	8c 32       	cpi	r24, 0x2C	; 44
 87e:	92 07       	cpc	r25, r18
 880:	20 f4       	brcc	.+8      	; 0x88a <__vector_16+0x68>
      {
         move(RIGHT);
 882:	8d e4       	ldi	r24, 0x4D	; 77
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 91 02 	call	0x522	; 0x522 <move>
      }
      if (adc[1]<300)		//아래
 88a:	80 91 6b 01 	lds	r24, 0x016B
 88e:	90 91 6c 01 	lds	r25, 0x016C
 892:	21 e0       	ldi	r18, 0x01	; 1
 894:	8c 32       	cpi	r24, 0x2C	; 44
 896:	92 07       	cpc	r25, r18
 898:	20 f4       	brcc	.+8      	; 0x8a2 <__vector_16+0x80>
         delay = 30;
 89a:	8e e1       	ldi	r24, 0x1E	; 30
 89c:	80 93 3a 01 	sts	0x013A, r24
 8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__vector_16+0x88>
      else
         speed(level);
 8a2:	80 91 38 01 	lds	r24, 0x0138
 8a6:	0e 94 67 00 	call	0xce	; 0xce <speed>
      pad_count = 0;
 8aa:	10 92 77 01 	sts	0x0177, r1
   }
   if (count == delay) {
 8ae:	90 91 75 01 	lds	r25, 0x0175
 8b2:	80 91 3a 01 	lds	r24, 0x013A
 8b6:	98 17       	cp	r25, r24
 8b8:	21 f4       	brne	.+8      	; 0x8c2 <__vector_16+0xa0>
      drop();
 8ba:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <drop>
      count = 0;
 8be:	10 92 75 01 	sts	0x0175, r1
   }
}
 8c2:	ff 91       	pop	r31
 8c4:	ef 91       	pop	r30
 8c6:	bf 91       	pop	r27
 8c8:	af 91       	pop	r26
 8ca:	9f 91       	pop	r25
 8cc:	8f 91       	pop	r24
 8ce:	7f 91       	pop	r23
 8d0:	6f 91       	pop	r22
 8d2:	5f 91       	pop	r21
 8d4:	4f 91       	pop	r20
 8d6:	3f 91       	pop	r19
 8d8:	2f 91       	pop	r18
 8da:	0f 90       	pop	r0
 8dc:	0b be       	out	0x3b, r0	; 59
 8de:	0f 90       	pop	r0
 8e0:	0f be       	out	0x3f, r0	; 63
 8e2:	0f 90       	pop	r0
 8e4:	1f 90       	pop	r1
 8e6:	18 95       	reti

000008e8 <__vector_21>:


ISR(ADC_vect)
{
 8e8:	1f 92       	push	r1
 8ea:	0f 92       	push	r0
 8ec:	0f b6       	in	r0, 0x3f	; 63
 8ee:	0f 92       	push	r0
 8f0:	11 24       	eor	r1, r1
 8f2:	8f 93       	push	r24
 8f4:	9f 93       	push	r25
   if (mux == PAD_X)
 8f6:	80 91 40 01 	lds	r24, 0x0140
 8fa:	88 23       	and	r24, r24
 8fc:	61 f4       	brne	.+24     	; 0x916 <__vector_21+0x2e>
   {
      adc[PAD_X] = ADC;
 8fe:	84 b1       	in	r24, 0x04	; 4
 900:	95 b1       	in	r25, 0x05	; 5
 902:	90 93 6a 01 	sts	0x016A, r25
 906:	80 93 69 01 	sts	0x0169, r24
      ADMUX = 0x40 | PAD_Y;
 90a:	81 e4       	ldi	r24, 0x41	; 65
 90c:	87 b9       	out	0x07, r24	; 7
      mux = PAD_Y;
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	80 93 40 01 	sts	0x0140, r24
 914:	0a c0       	rjmp	.+20     	; 0x92a <__vector_21+0x42>
   }
   else
   {
      adc[PAD_Y] = ADC;
 916:	84 b1       	in	r24, 0x04	; 4
 918:	95 b1       	in	r25, 0x05	; 5
 91a:	90 93 6c 01 	sts	0x016C, r25
 91e:	80 93 6b 01 	sts	0x016B, r24
      ADMUX = 0x40 | PAD_X;
 922:	80 e4       	ldi	r24, 0x40	; 64
 924:	87 b9       	out	0x07, r24	; 7
      mux = PAD_X;
 926:	10 92 40 01 	sts	0x0140, r1
   }

}
 92a:	9f 91       	pop	r25
 92c:	8f 91       	pop	r24
 92e:	0f 90       	pop	r0
 930:	0f be       	out	0x3f, r0	; 63
 932:	0f 90       	pop	r0
 934:	1f 90       	pop	r1
 936:	18 95       	reti

00000938 <Dot_init>:
   Dot_init(&dot_show);							//도트매트릭스 초기화
@endcode
*/
void Dot_init(dot_matrix * init)
{
	_dotP = init;
 938:	90 93 44 01 	sts	0x0144, r25
 93c:	80 93 43 01 	sts	0x0143, r24
}
 940:	08 95       	ret

00000942 <Dot_data>:
/**데이터 함수, 숫자 하나, 숫자배열 값 받아옴.
@return 출력할 배열의 xy좌표의 비트값
*/
unsigned char Dot_data(unsigned char y, unsigned char x)
{
	return (( *((_dotP->greenPtr).all+y) >> x) & 0x01 ) | (( (*((_dotP->redPtr).all+y) >> x) & 0x01 ) << 1);
 942:	e0 91 43 01 	lds	r30, 0x0143
 946:	f0 91 44 01 	lds	r31, 0x0144
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	a6 81       	ldd	r26, Z+6	; 0x06
 94e:	b7 81       	ldd	r27, Z+7	; 0x07
 950:	a8 0f       	add	r26, r24
 952:	b9 1f       	adc	r27, r25
 954:	2c 91       	ld	r18, X
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	06 2e       	mov	r0, r22
 95a:	02 c0       	rjmp	.+4      	; 0x960 <Dot_data+0x1e>
 95c:	35 95       	asr	r19
 95e:	27 95       	ror	r18
 960:	0a 94       	dec	r0
 962:	e2 f7       	brpl	.-8      	; 0x95c <Dot_data+0x1a>
 964:	21 70       	andi	r18, 0x01	; 1
 966:	30 70       	andi	r19, 0x00	; 0
 968:	22 0f       	add	r18, r18
 96a:	33 1f       	adc	r19, r19
 96c:	00 84       	ldd	r0, Z+8	; 0x08
 96e:	f1 85       	ldd	r31, Z+9	; 0x09
 970:	e0 2d       	mov	r30, r0
 972:	e8 0f       	add	r30, r24
 974:	f9 1f       	adc	r31, r25
 976:	80 81       	ld	r24, Z
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	02 c0       	rjmp	.+4      	; 0x980 <Dot_data+0x3e>
 97c:	95 95       	asr	r25
 97e:	87 95       	ror	r24
 980:	6a 95       	dec	r22
 982:	e2 f7       	brpl	.-8      	; 0x97c <Dot_data+0x3a>
 984:	81 70       	andi	r24, 0x01	; 1
}
 986:	82 2b       	or	r24, r18
 988:	08 95       	ret

0000098a <Dot_disp>:
/**출력 함수.
@param state 표시할 색깔 옵션 선택
@see disp_state
*/
void Dot_disp(disp_state state)
{
 98a:	6f 92       	push	r6
 98c:	7f 92       	push	r7
 98e:	8f 92       	push	r8
 990:	9f 92       	push	r9
 992:	af 92       	push	r10
 994:	bf 92       	push	r11
 996:	cf 92       	push	r12
 998:	df 92       	push	r13
 99a:	ef 92       	push	r14
 99c:	ff 92       	push	r15
 99e:	0f 93       	push	r16
 9a0:	1f 93       	push	r17
 9a2:	df 93       	push	r29
 9a4:	cf 93       	push	r28
 9a6:	0f 92       	push	r0
 9a8:	cd b7       	in	r28, 0x3d	; 61
 9aa:	de b7       	in	r29, 0x3e	; 62
 9ac:	98 2e       	mov	r9, r24
 9ae:	00 e0       	ldi	r16, 0x00	; 0
 9b0:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0;i<DOT_COL_SIZE;i++)
	{
		for(j=0;j<DOT_ROW_SIZE;j++)
		{
			*(_dotP->row.port) = ((Dot_data(i,j)&state)<<(_dotP->row.portNum));
			SCK_PULSE
 9b2:	61 e0       	ldi	r22, 0x01	; 1
 9b4:	e6 2e       	mov	r14, r22
 9b6:	f1 2c       	mov	r15, r1
 9b8:	51 e0       	ldi	r21, 0x01	; 1
 9ba:	c5 2e       	mov	r12, r21
 9bc:	d1 2c       	mov	r13, r1
 9be:	7b c0       	rjmp	.+246    	; 0xab6 <Dot_disp+0x12c>
	unsigned char i,j;
	for(i=0;i<DOT_COL_SIZE;i++)
	{
		for(j=0;j<DOT_ROW_SIZE;j++)
		{
			*(_dotP->row.port) = ((Dot_data(i,j)&state)<<(_dotP->row.portNum));
 9c0:	60 90 43 01 	lds	r6, 0x0143
 9c4:	70 90 44 01 	lds	r7, 0x0144
 9c8:	d3 01       	movw	r26, r6
 9ca:	11 96       	adiw	r26, 0x01	; 1
 9cc:	ad 90       	ld	r10, X+
 9ce:	bc 90       	ld	r11, X
 9d0:	12 97       	sbiw	r26, 0x02	; 2
 9d2:	88 2d       	mov	r24, r8
 9d4:	69 2f       	mov	r22, r25
 9d6:	99 83       	std	Y+1, r25	; 0x01
 9d8:	0e 94 a1 04 	call	0x942	; 0x942 <Dot_data>
 9dc:	89 21       	and	r24, r9
 9de:	28 2f       	mov	r18, r24
 9e0:	30 e0       	ldi	r19, 0x00	; 0
 9e2:	f3 01       	movw	r30, r6
 9e4:	00 80       	ld	r0, Z
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <Dot_disp+0x62>
 9e8:	22 0f       	add	r18, r18
 9ea:	33 1f       	adc	r19, r19
 9ec:	0a 94       	dec	r0
 9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <Dot_disp+0x5e>
 9f0:	d5 01       	movw	r26, r10
 9f2:	2c 93       	st	X, r18
			SCK_PULSE
 9f4:	01 80       	ldd	r0, Z+1	; 0x01
 9f6:	f2 81       	ldd	r31, Z+2	; 0x02
 9f8:	e0 2d       	mov	r30, r0
 9fa:	80 81       	ld	r24, Z
 9fc:	d3 01       	movw	r26, r6
 9fe:	2c 91       	ld	r18, X
 a00:	30 e0       	ldi	r19, 0x00	; 0
 a02:	2e 5f       	subi	r18, 0xFE	; 254
 a04:	3f 4f       	sbci	r19, 0xFF	; 255
 a06:	a7 01       	movw	r20, r14
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <Dot_disp+0x84>
 a0a:	44 0f       	add	r20, r20
 a0c:	55 1f       	adc	r21, r21
 a0e:	2a 95       	dec	r18
 a10:	e2 f7       	brpl	.-8      	; 0xa0a <Dot_disp+0x80>
 a12:	84 2b       	or	r24, r20
 a14:	80 83       	st	Z, r24
 a16:	11 96       	adiw	r26, 0x01	; 1
 a18:	ed 91       	ld	r30, X+
 a1a:	fc 91       	ld	r31, X
 a1c:	12 97       	sbiw	r26, 0x02	; 2
 a1e:	80 81       	ld	r24, Z
 a20:	2c 91       	ld	r18, X
 a22:	30 e0       	ldi	r19, 0x00	; 0
 a24:	2e 5f       	subi	r18, 0xFE	; 254
 a26:	3f 4f       	sbci	r19, 0xFF	; 255
 a28:	d7 01       	movw	r26, r14
 a2a:	02 c0       	rjmp	.+4      	; 0xa30 <Dot_disp+0xa6>
 a2c:	aa 0f       	add	r26, r26
 a2e:	bb 1f       	adc	r27, r27
 a30:	2a 95       	dec	r18
 a32:	e2 f7       	brpl	.-8      	; 0xa2c <Dot_disp+0xa2>
 a34:	9d 01       	movw	r18, r26
 a36:	20 95       	com	r18
 a38:	28 23       	and	r18, r24
 a3a:	20 83       	st	Z, r18
void Dot_disp(disp_state state)
{
	unsigned char i,j;
	for(i=0;i<DOT_COL_SIZE;i++)
	{
		for(j=0;j<DOT_ROW_SIZE;j++)
 a3c:	99 81       	ldd	r25, Y+1	; 0x01
 a3e:	9f 5f       	subi	r25, 0xFF	; 255
 a40:	98 30       	cpi	r25, 0x08	; 8
 a42:	09 f0       	breq	.+2      	; 0xa46 <Dot_disp+0xbc>
 a44:	bd cf       	rjmp	.-134    	; 0x9c0 <Dot_disp+0x36>
 a46:	e1 ee       	ldi	r30, 0xE1	; 225
 a48:	f4 e0       	ldi	r31, 0x04	; 4
 a4a:	31 97       	sbiw	r30, 0x01	; 1
 a4c:	f1 f7       	brne	.-4      	; 0xa4a <Dot_disp+0xc0>
 a4e:	00 c0       	rjmp	.+0      	; 0xa50 <Dot_disp+0xc6>
 a50:	00 00       	nop
		{
			*(_dotP->row.port) = ((Dot_data(i,j)&state)<<(_dotP->row.portNum));
			SCK_PULSE
		}
		_delay_ms(5);
		RCK_PULSE
 a52:	e0 91 43 01 	lds	r30, 0x0143
 a56:	f0 91 44 01 	lds	r31, 0x0144
 a5a:	a1 81       	ldd	r26, Z+1	; 0x01
 a5c:	b2 81       	ldd	r27, Z+2	; 0x02
 a5e:	2c 91       	ld	r18, X
 a60:	80 81       	ld	r24, Z
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	03 96       	adiw	r24, 0x03	; 3
 a66:	a6 01       	movw	r20, r12
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <Dot_disp+0xe4>
 a6a:	44 0f       	add	r20, r20
 a6c:	55 1f       	adc	r21, r21
 a6e:	8a 95       	dec	r24
 a70:	e2 f7       	brpl	.-8      	; 0xa6a <Dot_disp+0xe0>
 a72:	24 2b       	or	r18, r20
 a74:	2c 93       	st	X, r18
 a76:	a1 81       	ldd	r26, Z+1	; 0x01
 a78:	b2 81       	ldd	r27, Z+2	; 0x02
 a7a:	8c 91       	ld	r24, X
 a7c:	20 81       	ld	r18, Z
 a7e:	30 e0       	ldi	r19, 0x00	; 0
 a80:	2d 5f       	subi	r18, 0xFD	; 253
 a82:	3f 4f       	sbci	r19, 0xFF	; 255
 a84:	a6 01       	movw	r20, r12
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <Dot_disp+0x102>
 a88:	44 0f       	add	r20, r20
 a8a:	55 1f       	adc	r21, r21
 a8c:	2a 95       	dec	r18
 a8e:	e2 f7       	brpl	.-8      	; 0xa88 <Dot_disp+0xfe>
 a90:	9a 01       	movw	r18, r20
 a92:	20 95       	com	r18
 a94:	28 23       	and	r18, r24
 a96:	2c 93       	st	X, r18
		*(_dotP->col.port) = (i<<(_dotP->col.portNum));
 a98:	a4 81       	ldd	r26, Z+4	; 0x04
 a9a:	b5 81       	ldd	r27, Z+5	; 0x05
 a9c:	c8 01       	movw	r24, r16
 a9e:	03 80       	ldd	r0, Z+3	; 0x03
 aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <Dot_disp+0x11c>
 aa2:	88 0f       	add	r24, r24
 aa4:	99 1f       	adc	r25, r25
 aa6:	0a 94       	dec	r0
 aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <Dot_disp+0x118>
 aaa:	8c 93       	st	X, r24
 aac:	0f 5f       	subi	r16, 0xFF	; 255
 aae:	1f 4f       	sbci	r17, 0xFF	; 255
@see disp_state
*/
void Dot_disp(disp_state state)
{
	unsigned char i,j;
	for(i=0;i<DOT_COL_SIZE;i++)
 ab0:	00 31       	cpi	r16, 0x10	; 16
 ab2:	11 05       	cpc	r17, r1
 ab4:	19 f0       	breq	.+6      	; 0xabc <Dot_disp+0x132>
 ab6:	80 2e       	mov	r8, r16
/**출력 함수.
@param state 표시할 색깔 옵션 선택
@see disp_state
*/
void Dot_disp(disp_state state)
{
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	82 cf       	rjmp	.-252    	; 0x9c0 <Dot_disp+0x36>
		}
		_delay_ms(5);
		RCK_PULSE
		*(_dotP->col.port) = (i<<(_dotP->col.portNum));
	}
}
 abc:	0f 90       	pop	r0
 abe:	cf 91       	pop	r28
 ac0:	df 91       	pop	r29
 ac2:	1f 91       	pop	r17
 ac4:	0f 91       	pop	r16
 ac6:	ff 90       	pop	r15
 ac8:	ef 90       	pop	r14
 aca:	df 90       	pop	r13
 acc:	cf 90       	pop	r12
 ace:	bf 90       	pop	r11
 ad0:	af 90       	pop	r10
 ad2:	9f 90       	pop	r9
 ad4:	8f 90       	pop	r8
 ad6:	7f 90       	pop	r7
 ad8:	6f 90       	pop	r6
 ada:	08 95       	ret

00000adc <Dot_portSet>:
   dot_show.row = Dot_portSet(&PORTB, 0);		//행 포트, 시작 핀번호 설정
   dot_show.col = Dot_portSet(&PORTC, 0);		//열 포트, 시작 핀번호 설정
@endcode
*/
dot_port Dot_portSet(uint8_t * port, unsigned char pNum)
{
 adc:	df 93       	push	r29
 ade:	cf 93       	push	r28
 ae0:	00 d0       	rcall	.+0      	; 0xae2 <Dot_portSet+0x6>
 ae2:	0f 92       	push	r0
 ae4:	cd b7       	in	r28, 0x3d	; 61
 ae6:	de b7       	in	r29, 0x3e	; 62
 ae8:	8a 83       	std	Y+2, r24	; 0x02
 aea:	9b 83       	std	Y+3, r25	; 0x03
 aec:	78 2f       	mov	r23, r24
	dot_port dp;
	dp.port = port;
	dp.portNum = pNum;
	return dp;
}
 aee:	89 2f       	mov	r24, r25
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	0f 90       	pop	r0
 af4:	0f 90       	pop	r0
 af6:	0f 90       	pop	r0
 af8:	cf 91       	pop	r28
 afa:	df 91       	pop	r29
 afc:	08 95       	ret

00000afe <__divmodhi4>:
 afe:	97 fb       	bst	r25, 7
 b00:	09 2e       	mov	r0, r25
 b02:	07 26       	eor	r0, r23
 b04:	0a d0       	rcall	.+20     	; 0xb1a <__divmodhi4_neg1>
 b06:	77 fd       	sbrc	r23, 7
 b08:	04 d0       	rcall	.+8      	; 0xb12 <__divmodhi4_neg2>
 b0a:	0c d0       	rcall	.+24     	; 0xb24 <__udivmodhi4>
 b0c:	06 d0       	rcall	.+12     	; 0xb1a <__divmodhi4_neg1>
 b0e:	00 20       	and	r0, r0
 b10:	1a f4       	brpl	.+6      	; 0xb18 <__divmodhi4_exit>

00000b12 <__divmodhi4_neg2>:
 b12:	70 95       	com	r23
 b14:	61 95       	neg	r22
 b16:	7f 4f       	sbci	r23, 0xFF	; 255

00000b18 <__divmodhi4_exit>:
 b18:	08 95       	ret

00000b1a <__divmodhi4_neg1>:
 b1a:	f6 f7       	brtc	.-4      	; 0xb18 <__divmodhi4_exit>
 b1c:	90 95       	com	r25
 b1e:	81 95       	neg	r24
 b20:	9f 4f       	sbci	r25, 0xFF	; 255
 b22:	08 95       	ret

00000b24 <__udivmodhi4>:
 b24:	aa 1b       	sub	r26, r26
 b26:	bb 1b       	sub	r27, r27
 b28:	51 e1       	ldi	r21, 0x11	; 17
 b2a:	07 c0       	rjmp	.+14     	; 0xb3a <__udivmodhi4_ep>

00000b2c <__udivmodhi4_loop>:
 b2c:	aa 1f       	adc	r26, r26
 b2e:	bb 1f       	adc	r27, r27
 b30:	a6 17       	cp	r26, r22
 b32:	b7 07       	cpc	r27, r23
 b34:	10 f0       	brcs	.+4      	; 0xb3a <__udivmodhi4_ep>
 b36:	a6 1b       	sub	r26, r22
 b38:	b7 0b       	sbc	r27, r23

00000b3a <__udivmodhi4_ep>:
 b3a:	88 1f       	adc	r24, r24
 b3c:	99 1f       	adc	r25, r25
 b3e:	5a 95       	dec	r21
 b40:	a9 f7       	brne	.-22     	; 0xb2c <__udivmodhi4_loop>
 b42:	80 95       	com	r24
 b44:	90 95       	com	r25
 b46:	bc 01       	movw	r22, r24
 b48:	cd 01       	movw	r24, r26
 b4a:	08 95       	ret

00000b4c <do_rand>:
 b4c:	af 92       	push	r10
 b4e:	bf 92       	push	r11
 b50:	cf 92       	push	r12
 b52:	df 92       	push	r13
 b54:	ef 92       	push	r14
 b56:	ff 92       	push	r15
 b58:	0f 93       	push	r16
 b5a:	1f 93       	push	r17
 b5c:	cf 93       	push	r28
 b5e:	df 93       	push	r29
 b60:	ec 01       	movw	r28, r24
 b62:	68 81       	ld	r22, Y
 b64:	79 81       	ldd	r23, Y+1	; 0x01
 b66:	8a 81       	ldd	r24, Y+2	; 0x02
 b68:	9b 81       	ldd	r25, Y+3	; 0x03
 b6a:	61 15       	cp	r22, r1
 b6c:	71 05       	cpc	r23, r1
 b6e:	81 05       	cpc	r24, r1
 b70:	91 05       	cpc	r25, r1
 b72:	21 f4       	brne	.+8      	; 0xb7c <do_rand+0x30>
 b74:	64 e2       	ldi	r22, 0x24	; 36
 b76:	79 ed       	ldi	r23, 0xD9	; 217
 b78:	8b e5       	ldi	r24, 0x5B	; 91
 b7a:	97 e0       	ldi	r25, 0x07	; 7
 b7c:	2d e1       	ldi	r18, 0x1D	; 29
 b7e:	33 ef       	ldi	r19, 0xF3	; 243
 b80:	41 e0       	ldi	r20, 0x01	; 1
 b82:	50 e0       	ldi	r21, 0x00	; 0
 b84:	0e 94 23 06 	call	0xc46	; 0xc46 <__divmodsi4>
 b88:	79 01       	movw	r14, r18
 b8a:	8a 01       	movw	r16, r20
 b8c:	27 ea       	ldi	r18, 0xA7	; 167
 b8e:	31 e4       	ldi	r19, 0x41	; 65
 b90:	40 e0       	ldi	r20, 0x00	; 0
 b92:	50 e0       	ldi	r21, 0x00	; 0
 b94:	0e 94 04 06 	call	0xc08	; 0xc08 <__mulsi3>
 b98:	5b 01       	movw	r10, r22
 b9a:	6c 01       	movw	r12, r24
 b9c:	c8 01       	movw	r24, r16
 b9e:	b7 01       	movw	r22, r14
 ba0:	2c ee       	ldi	r18, 0xEC	; 236
 ba2:	34 ef       	ldi	r19, 0xF4	; 244
 ba4:	4f ef       	ldi	r20, 0xFF	; 255
 ba6:	5f ef       	ldi	r21, 0xFF	; 255
 ba8:	0e 94 04 06 	call	0xc08	; 0xc08 <__mulsi3>
 bac:	6a 0d       	add	r22, r10
 bae:	7b 1d       	adc	r23, r11
 bb0:	8c 1d       	adc	r24, r12
 bb2:	9d 1d       	adc	r25, r13
 bb4:	97 ff       	sbrs	r25, 7
 bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <do_rand+0x74>
 bb8:	61 50       	subi	r22, 0x01	; 1
 bba:	70 40       	sbci	r23, 0x00	; 0
 bbc:	80 40       	sbci	r24, 0x00	; 0
 bbe:	90 48       	sbci	r25, 0x80	; 128
 bc0:	68 83       	st	Y, r22
 bc2:	79 83       	std	Y+1, r23	; 0x01
 bc4:	8a 83       	std	Y+2, r24	; 0x02
 bc6:	9b 83       	std	Y+3, r25	; 0x03
 bc8:	7f 77       	andi	r23, 0x7F	; 127
 bca:	cb 01       	movw	r24, r22
 bcc:	df 91       	pop	r29
 bce:	cf 91       	pop	r28
 bd0:	1f 91       	pop	r17
 bd2:	0f 91       	pop	r16
 bd4:	ff 90       	pop	r15
 bd6:	ef 90       	pop	r14
 bd8:	df 90       	pop	r13
 bda:	cf 90       	pop	r12
 bdc:	bf 90       	pop	r11
 bde:	af 90       	pop	r10
 be0:	08 95       	ret

00000be2 <rand_r>:
 be2:	0e 94 a6 05 	call	0xb4c	; 0xb4c <do_rand>
 be6:	08 95       	ret

00000be8 <rand>:
 be8:	8b e3       	ldi	r24, 0x3B	; 59
 bea:	91 e0       	ldi	r25, 0x01	; 1
 bec:	0e 94 a6 05 	call	0xb4c	; 0xb4c <do_rand>
 bf0:	08 95       	ret

00000bf2 <srand>:
 bf2:	a0 e0       	ldi	r26, 0x00	; 0
 bf4:	b0 e0       	ldi	r27, 0x00	; 0
 bf6:	80 93 3b 01 	sts	0x013B, r24
 bfa:	90 93 3c 01 	sts	0x013C, r25
 bfe:	a0 93 3d 01 	sts	0x013D, r26
 c02:	b0 93 3e 01 	sts	0x013E, r27
 c06:	08 95       	ret

00000c08 <__mulsi3>:
 c08:	62 9f       	mul	r22, r18
 c0a:	d0 01       	movw	r26, r0
 c0c:	73 9f       	mul	r23, r19
 c0e:	f0 01       	movw	r30, r0
 c10:	82 9f       	mul	r24, r18
 c12:	e0 0d       	add	r30, r0
 c14:	f1 1d       	adc	r31, r1
 c16:	64 9f       	mul	r22, r20
 c18:	e0 0d       	add	r30, r0
 c1a:	f1 1d       	adc	r31, r1
 c1c:	92 9f       	mul	r25, r18
 c1e:	f0 0d       	add	r31, r0
 c20:	83 9f       	mul	r24, r19
 c22:	f0 0d       	add	r31, r0
 c24:	74 9f       	mul	r23, r20
 c26:	f0 0d       	add	r31, r0
 c28:	65 9f       	mul	r22, r21
 c2a:	f0 0d       	add	r31, r0
 c2c:	99 27       	eor	r25, r25
 c2e:	72 9f       	mul	r23, r18
 c30:	b0 0d       	add	r27, r0
 c32:	e1 1d       	adc	r30, r1
 c34:	f9 1f       	adc	r31, r25
 c36:	63 9f       	mul	r22, r19
 c38:	b0 0d       	add	r27, r0
 c3a:	e1 1d       	adc	r30, r1
 c3c:	f9 1f       	adc	r31, r25
 c3e:	bd 01       	movw	r22, r26
 c40:	cf 01       	movw	r24, r30
 c42:	11 24       	eor	r1, r1
 c44:	08 95       	ret

00000c46 <__divmodsi4>:
 c46:	97 fb       	bst	r25, 7
 c48:	09 2e       	mov	r0, r25
 c4a:	05 26       	eor	r0, r21
 c4c:	0e d0       	rcall	.+28     	; 0xc6a <__divmodsi4_neg1>
 c4e:	57 fd       	sbrc	r21, 7
 c50:	04 d0       	rcall	.+8      	; 0xc5a <__divmodsi4_neg2>
 c52:	14 d0       	rcall	.+40     	; 0xc7c <__udivmodsi4>
 c54:	0a d0       	rcall	.+20     	; 0xc6a <__divmodsi4_neg1>
 c56:	00 1c       	adc	r0, r0
 c58:	38 f4       	brcc	.+14     	; 0xc68 <__divmodsi4_exit>

00000c5a <__divmodsi4_neg2>:
 c5a:	50 95       	com	r21
 c5c:	40 95       	com	r20
 c5e:	30 95       	com	r19
 c60:	21 95       	neg	r18
 c62:	3f 4f       	sbci	r19, 0xFF	; 255
 c64:	4f 4f       	sbci	r20, 0xFF	; 255
 c66:	5f 4f       	sbci	r21, 0xFF	; 255

00000c68 <__divmodsi4_exit>:
 c68:	08 95       	ret

00000c6a <__divmodsi4_neg1>:
 c6a:	f6 f7       	brtc	.-4      	; 0xc68 <__divmodsi4_exit>
 c6c:	90 95       	com	r25
 c6e:	80 95       	com	r24
 c70:	70 95       	com	r23
 c72:	61 95       	neg	r22
 c74:	7f 4f       	sbci	r23, 0xFF	; 255
 c76:	8f 4f       	sbci	r24, 0xFF	; 255
 c78:	9f 4f       	sbci	r25, 0xFF	; 255
 c7a:	08 95       	ret

00000c7c <__udivmodsi4>:
 c7c:	a1 e2       	ldi	r26, 0x21	; 33
 c7e:	1a 2e       	mov	r1, r26
 c80:	aa 1b       	sub	r26, r26
 c82:	bb 1b       	sub	r27, r27
 c84:	fd 01       	movw	r30, r26
 c86:	0d c0       	rjmp	.+26     	; 0xca2 <__udivmodsi4_ep>

00000c88 <__udivmodsi4_loop>:
 c88:	aa 1f       	adc	r26, r26
 c8a:	bb 1f       	adc	r27, r27
 c8c:	ee 1f       	adc	r30, r30
 c8e:	ff 1f       	adc	r31, r31
 c90:	a2 17       	cp	r26, r18
 c92:	b3 07       	cpc	r27, r19
 c94:	e4 07       	cpc	r30, r20
 c96:	f5 07       	cpc	r31, r21
 c98:	20 f0       	brcs	.+8      	; 0xca2 <__udivmodsi4_ep>
 c9a:	a2 1b       	sub	r26, r18
 c9c:	b3 0b       	sbc	r27, r19
 c9e:	e4 0b       	sbc	r30, r20
 ca0:	f5 0b       	sbc	r31, r21

00000ca2 <__udivmodsi4_ep>:
 ca2:	66 1f       	adc	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	99 1f       	adc	r25, r25
 caa:	1a 94       	dec	r1
 cac:	69 f7       	brne	.-38     	; 0xc88 <__udivmodsi4_loop>
 cae:	60 95       	com	r22
 cb0:	70 95       	com	r23
 cb2:	80 95       	com	r24
 cb4:	90 95       	com	r25
 cb6:	9b 01       	movw	r18, r22
 cb8:	ac 01       	movw	r20, r24
 cba:	bd 01       	movw	r22, r26
 cbc:	cf 01       	movw	r24, r30
 cbe:	08 95       	ret

00000cc0 <_exit>:
 cc0:	f8 94       	cli

00000cc2 <__stop_program>:
 cc2:	ff cf       	rjmp	.-2      	; 0xcc2 <__stop_program>
